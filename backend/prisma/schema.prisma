// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// ----------------------------- ///
///        User management        ///
/// ----------------------------- ///
enum UserRole {
  USER
  DISTRICT_COORDINATOR
  TOPLEVEL_COORDINATOR
  ADMIN
}

model User {
  id          Int @id() @default(autoincrement())
  email       String @unique
  password    String?
  activationKey String? @default(uuid()) @unique
  passwordReset String? @unique
  createdAt   DateTime @default(now())
  lastLogin   DateTime @default(now())

  notifications Notification[]

  role        UserRole @default(USER)
  districtAdminId Int?
  districtAdmin   District? @relation(fields: [districtAdminId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  teamId      Int?
  team        Team? @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  teamAccepted Boolean @default(false)

  //@@index([email]) //uniqueness guarantees index
  @@index([role])
  @@index([role, districtAdminId])
}

/// ----------------------------- ///
///        Team management        ///
/// ----------------------------- ///
model Team {
  id          Int @id @default(autoincrement())
  name        String
  shadow      Boolean @default(false)
  createdAt   DateTime @default(now())

  districtId  Int
  district    District @relation(fields: [districtId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  owners      User[]

  initialTasks InitialTaskJoint[]
  tasks       TaskJoint[]

  locked      Boolean @default(false)

  @@index([shadow])
  @@index([districtId])
}

model District {
  id          Int @id @default(autoincrement())
  name        String
  shadow      Boolean @default(false)
  autoaccept  Boolean @default(true)

  teams       Team[]

  admins      User[]

  @@index([shadow])
}

/// ----------------------------- ///
///        Task management        ///
/// ----------------------------- ///
enum CategorizationYearState {
  DRAFT
  OPEN
  FINISHED
}

model CategorizationYear {
  id          Int @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  state       CategorizationYearState @default(DRAFT)

  lesnaLesneThreshold        Int @default(1)
  lesnaPuszczanskieThreshold Int @default(1)
  puszczanskaLesnaThreshold  Int @default(2)
  puszczanskaPuszczanskieThreshold Int @default(2)

  initialTasks InitialTask[]
  taskGroup    CategorizationTaskGroup[]

  ranking      Ranking?
}

model CategorizationTaskGroup {
  id          Int @id @default(autoincrement())
  name        String

  categorizationYearId  Int
  categorizationYear    CategorizationYear @relation(fields: [categorizationYearId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  primaryTasks  CategorizationTask[] @relation("ctasks_group_primary")
  secondaryTasks  CategorizationTask[] @relation("ctasks_group_secondary")

  lesnaThreshold        Int
  puszczanskaThreshold  Int

  displayPriority Int @default(100)
}

enum CategorizationTaskType {
  BOOLEAN
  LINEAR
  LINEAR_REF
  PARABOLIC_REF
  REFONLY
}

model CategorizationTask {
  id          Int @id @default(autoincrement())
  name        String
  description String? @db.Text
  primaryGroupId      Int
  primaryGroup        CategorizationTaskGroup @relation("ctasks_group_primary", fields: [primaryGroupId], references: [id])
  secondaryGroupId    Int?
  secondaryGroup      CategorizationTaskGroup? @relation("ctasks_group_secondary", fields: [secondaryGroupId], references: [id])
  split               Float @default(0.5)

  type        CategorizationTaskType
  maxPoints   Int
  multiplier  Float?
  refValId    Int?
  refVal      CategorizationTask? @relation("ctask_refval", fields: [refValId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  refVals     CategorizationTask[] @relation("ctask_refval")

  obligatory  Boolean @default(false)

  joints      TaskJoint[]

  @@index([primaryGroupId])
  @@index([secondaryGroupId])
}

model InitialTask {
  id          Int @id @default(autoincrement())
  name        String
  description String? @db.Text
  categorizationYearId  Int
  categorizationYear    CategorizationYear @relation(fields: [categorizationYearId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  joints      InitialTaskJoint[]

  displayPriority Int @default(100)
}

model TaskJoint {
  taskId      Int
  task        CategorizationTask @relation(fields: [taskId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamId      Int
  team        Team @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  favourite   Boolean @default(false)
  value       Int @default(0)

  @@id([taskId, teamId])
  @@index([teamId])
  //@@index([teamId, favourite])
  //@@index([teamId, value])
}

model InitialTaskJoint {
  taskId      Int
  task        InitialTask @relation(fields: [taskId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamId      Int
  team        Team @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  value       Boolean @default(false)

  @@id([taskId, teamId])
  @@index([teamId])
  //@@index([teamId, value])
}

model Ranking {
  categorizationYearId  Int @id
  categorizationYear    CategorizationYear @relation(fields: [categorizationYearId], references: [id])

  JSON                  String @db.Text
}

model Notification {
  id      Int @id @default(autoincrement())

  userId  Int
  user    User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  text    String @db.TinyText
  unread  Boolean @default(true)
  time    DateTime @default(now())

  @@index([unread])
}